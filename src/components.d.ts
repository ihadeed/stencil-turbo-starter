/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */

import '@stencil/router';

import { AddressSearch as AddressSearch } from './components/address-search/address-search';

interface HTMLAddressSearchElement extends AddressSearch, HTMLElement {
}
declare var HTMLAddressSearchElement: {
  prototype: HTMLAddressSearchElement;
  new (): HTMLAddressSearchElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "address-search": HTMLAddressSearchElement;
  }
  interface ElementTagNameMap {
      "address-search": HTMLAddressSearchElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "address-search": JSXElements.AddressSearchAttributes;
      }
  }
  namespace JSXElements {
      export interface AddressSearchAttributes extends HTMLAttributes {
        
      }
  }
}

import { SiteHeader as SiteHeader } from './components/site-header/site-header';

interface HTMLSiteHeaderElement extends SiteHeader, HTMLElement {
}
declare var HTMLSiteHeaderElement: {
  prototype: HTMLSiteHeaderElement;
  new (): HTMLSiteHeaderElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "site-header": HTMLSiteHeaderElement;
  }
  interface ElementTagNameMap {
      "site-header": HTMLSiteHeaderElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "site-header": JSXElements.SiteHeaderAttributes;
      }
  }
  namespace JSXElements {
      export interface SiteHeaderAttributes extends HTMLAttributes {
        
      }
  }
}

import { MyApp as MyApp } from './my-app/my-app';

interface HTMLMyAppElement extends MyApp, HTMLElement {
}
declare var HTMLMyAppElement: {
  prototype: HTMLMyAppElement;
  new (): HTMLMyAppElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "my-app": HTMLMyAppElement;
  }
  interface ElementTagNameMap {
      "my-app": HTMLMyAppElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "my-app": JSXElements.MyAppAttributes;
      }
  }
  namespace JSXElements {
      export interface MyAppAttributes extends HTMLAttributes {
        
      }
  }
}

import { EventsPage as EventsPage } from './pages/events-page/events-page';

interface HTMLEventsPageElement extends EventsPage, HTMLElement {
}
declare var HTMLEventsPageElement: {
  prototype: HTMLEventsPageElement;
  new (): HTMLEventsPageElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "events-page": HTMLEventsPageElement;
  }
  interface ElementTagNameMap {
      "events-page": HTMLEventsPageElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "events-page": JSXElements.EventsPageAttributes;
      }
  }
  namespace JSXElements {
      export interface EventsPageAttributes extends HTMLAttributes {
        
      }
  }
}

import { HomePage as HomePage } from './pages/home-page/home-page';

interface HTMLHomePageElement extends HomePage, HTMLElement {
}
declare var HTMLHomePageElement: {
  prototype: HTMLHomePageElement;
  new (): HTMLHomePageElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "home-page": HTMLHomePageElement;
  }
  interface ElementTagNameMap {
      "home-page": HTMLHomePageElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "home-page": JSXElements.HomePageAttributes;
      }
  }
  namespace JSXElements {
      export interface HomePageAttributes extends HTMLAttributes {
        
      }
  }
}

import { VenuesPage as VenuesPage } from './pages/venues-page/venues-page';

interface HTMLVenuesPageElement extends VenuesPage, HTMLElement {
}
declare var HTMLVenuesPageElement: {
  prototype: HTMLVenuesPageElement;
  new (): HTMLVenuesPageElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "venues-page": HTMLVenuesPageElement;
  }
  interface ElementTagNameMap {
      "venues-page": HTMLVenuesPageElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "venues-page": JSXElements.VenuesPageAttributes;
      }
  }
  namespace JSXElements {
      export interface VenuesPageAttributes extends HTMLAttributes {
        
      }
  }
}

import { APIService as ApiService } from './services/api-service';

interface HTMLApiServiceElement extends ApiService, HTMLElement {
}
declare var HTMLApiServiceElement: {
  prototype: HTMLApiServiceElement;
  new (): HTMLApiServiceElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "api-service": HTMLApiServiceElement;
  }
  interface ElementTagNameMap {
      "api-service": HTMLApiServiceElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "api-service": JSXElements.ApiServiceAttributes;
      }
  }
  namespace JSXElements {
      export interface ApiServiceAttributes extends HTMLAttributes {
        
      }
  }
}

